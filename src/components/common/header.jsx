import React, { useState, useEffect, useRef } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Client } from "@stomp/stompjs";
import useAuthStore from "@/store/AuthStore";
import axiosInstance from "@/utils/axiosInstance";
import { fetchNotifications } from "@/api/notificationAPI";
import { NOTIFICATION_MY_SELECT_URI, WS_URL } from "./../../api/_URI";

export default function Header({ onToggleAside }) {
  const navigate = useNavigate();
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [showNotifications, setShowNotifications] = useState(false);
  const [highlight, setHighlight] = useState(false);
  const [showDropdown, setShowDropdown] = useState(false);

  const user = useAuthStore((state) => state.user); // ZustandÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const stompClientRef = useRef(null); // WebSocket ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î†àÌçºÎü∞Ïä§

  // ÏÑúÎ≤ÑÏóêÏÑú Ï¥àÍ∏∞ ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Í∏∞
  const loadNotifications = async () => {
    if (!user?.id) {
      console.error("‚ùå User ID is not available for fetching notifications.");
      return;
    }

    try {
      const data = await fetchNotifications(user.id); // Ïô∏Î∂Ä Ìï®ÏàòÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏïåÎ¶º Ï°∞Ìöå
      setNotifications(data); // Ï°∞ÌöåÎêú ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setUnreadCount(data.filter((n) => !n.isRead).length); // ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Í∞úÏàò Í≥ÑÏÇ∞
    } catch (error) {
      console.error("‚ùå Failed to fetch notifications:", error);
    }
  };
  useEffect(() => {
    loadNotifications(); // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ï¥àÍ∏∞ ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
  }, [user?.id]);

  // WebSocket ÏÑ§Ï†ï
  useEffect(() => {
    if (!user?.id) {
      console.error(
        "‚ùå User ID is not available. WebSocket will not be initialized."
      );
      return;
    }

    const client = new Client({
      brokerURL: "ws://localhost:8080/ws", // WebSocket ÏÑúÎ≤Ñ URL
      reconnectDelay: 5000, // Ïû¨Ïó∞Í≤∞ ÎîúÎ†àÏù¥
      heartbeatIncoming: 4000, // Heartbeat ÏÑ§Ï†ï (ÏàòÏã†)
      heartbeatOutgoing: 4000, // Heartbeat ÏÑ§Ï†ï (ÏÜ°Ïã†)
      debug: (msg) => console.log("üîå WebSocket Debug:", msg), // ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏
    });

    client.onConnect = () => {
      console.log("‚úÖ WebSocket Ïó∞Í≤∞ ÏÑ±Í≥µ");
      stompClientRef.current = client;

      // Íµ¨ÎèÖ ÏÑ§Ï†ï
      const subscription = client.subscribe(
        `/topic/notifications/${user.id}`, // ÌëúÏ§Ä WebSocket Í≤ΩÎ°ú
        (message) => {
          try {
            const notification = JSON.parse(message.body);
            console.log("üîî ÏïåÎ¶º Î©îÏãúÏßÄ ÏàòÏã†:", notification);

            setNotifications((prev) => [notification, ...prev]);
            setUnreadCount((prev) => prev + 1);
            setHighlight(true);
            setTimeout(() => setHighlight(false), 1000); // Í∞ïÏ°∞ Ìö®Í≥º
          } catch (error) {
            console.error("‚ùå Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ï§ë ÏóêÎü¨:", error);
          }
        }
      );

      console.log("üì© Subscribed to: /topic/notifications/" + user.id);

      return () => subscription.unsubscribe();
    };

    client.onDisconnect = () => {
      console.log("üî¥ WebSocket Ïó∞Í≤∞ Ìï¥Ï†ú");
      stompClientRef.current = null;
    };

    client.onStompError = (frame) => {
      console.error("‚ùå STOMP Error:", frame.headers["message"], frame.body);
    };

    try {
      client.activate();
      console.log("üîå WebSocket ÌôúÏÑ±Ìôî Ï§ë...");
    } catch (error) {
      console.error("‚ùå WebSocket ÌôúÏÑ±Ìôî Ï§ë ÏóêÎü¨:", error);
    }

    return () => {
      if (client.active) {
        client.deactivate();
      }
    };
  }, [user?.id]);

  // ÏïåÎ¶º ÎìúÎ°≠Îã§Ïö¥ Ïó¥Í∏∞
  const toggleNotifications = () => {
    setShowNotifications(!showNotifications);
    setUnreadCount(0); // ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Ï¥àÍ∏∞Ìôî

    setNotifications((prev) =>
      prev.map((notification) => ({
        ...notification,
        isRead: true,
      }))
    );
  };

  // Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
  const handleLogout = async (e) => {
    e.preventDefault();
    try {
      navigate("/login"); // Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
    } catch (error) {
      console.error("Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:", error.message);
      alert("Î°úÍ∑∏ÏïÑÏõÉÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
    }
  };

  // ÎìúÎ°≠Îã§Ïö¥ ÌÜ†Í∏Ä
  const toggleDropdown = (e) => {
    e.preventDefault();
    setShowDropdown(!showDropdown);
  };

  return (
    <header className="z-[1000]">
      <div className="header leftside">
        <a
          href="#"
          id="openSidebarBtn"
          onClick={(e) => {
            e.preventDefault();
            onToggleAside();
          }}
        >
          <img
            src="/images/ico/menu_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.svg"
            alt="menu"
          />
        </a>
        <h1 className="hlogo">
          <img
            className="mt-[10px]"
            src="/images/Landing/antwork_logo.png"
            alt=""
          />
        </h1>
      </div>
      <div className="header rightside">
        <div className="relative">
          <a
            href="#"
            onClick={(e) => {
              e.preventDefault();
              toggleNotifications();
            }}
          >
            <img
              src="/images/ico/notifications_24dp_5F6368_FILL0_wght400_GRAD0_opsz24 copy.svg"
              alt="alarm"
              className={`transition-transform duration-300 ${
                highlight ? "animate-bounce" : ""
              }`}
            />
            {unreadCount > 0 && (
              <span className="absolute top-0 right-0 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
                {unreadCount}
              </span>
            )}
          </a>
          {showNotifications && (
            <div className="absolute top-full right-0 w-80 bg-white shadow-lg border rounded-md">
              <div className="p-3 border-b">
                <h3 className="text-lg font-semibold">ÏïåÎ¶º</h3>
              </div>
              <ul className="max-h-64 overflow-y-auto">
                {notifications.map((notification, index) => (
                  <li
                    key={index}
                    className={`p-3 cursor-pointer ${
                      notification.isRead ? "text-gray-500" : "font-bold"
                    } hover:bg-gray-100`}
                  >
                    {notification.message}
                    <span className="block text-xs text-gray-400">
                      {new Date(notification.createdAt).toLocaleString()}
                    </span>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
        <a href="#">
          <img src="/images/ico/nav_chat.svg" alt="message" />
        </a>
        <div className="user-info headeruser relative">
          <img
            src="/images/ico/account_circle_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.svg"
            alt="profile"
            className="avatar"
          />
          <div className="user-details">
            <h3>{user?.name || "ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ"}</h3>
            <p>{user?.team || "ÏÜåÏÜç ÌåÄ"}</p>
          </div>
          <a href="#" onClick={toggleDropdown}>
            <img
              src="/images/ico/keyboard_arrow_down_20dp_5F6368_FILL0_wght400_GRAD0_opsz20.svg"
              alt="arrow"
            />
          </a>
          {showDropdown && (
            <div className={`dropdown-menu ${showDropdown ? "show" : ""}`}>
              <ul>
                <li className="p-3 hover:bg-gray-100">
                  <Link to="/antwork/setting/myinfo">ÎÇòÏùò Ï†ïÎ≥¥ ÏàòÏ†ï</Link>
                </li>
                <li className="p-3 hover:bg-gray-100">
                  <Link to="/antwork/setting">ÏÑ§Ï†ï ÌéòÏù¥ÏßÄ</Link>
                </li>
                <li className="p-3 hover:bg-gray-100">
                  <Link to="/antwork/admin">Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄ</Link>
                </li>
              </ul>
            </div>
          )}
        </div>
        <a href="#" onClick={handleLogout}>
          <img
            src="/images/ico/logout_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.svg"
            alt="logout"
          />
        </a>
      </div>
    </header>
  );
}
